{"ast":null,"code":"var _jsxFileName = \"D:\\\\WORK\\\\20241012_Stock_Market_Game_2\\\\2-stock-game\\\\stock-simulator-client\\\\src\\\\Pages\\\\App.js\",\n  _s = $RefreshSig$();\n// src/components/App.js\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport SimulationControl from '../components/SimulationControl';\n// import StocksList from '../components/StocksList';\nimport NavigationBar from '../components/Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [simulationRunning, setSimulationRunning] = useState(false);\n  const [simulationData, setSimulationData] = useState({\n    stocks: [],\n    autoplayers: []\n  });\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    let interval;\n    if (simulationRunning) {\n      interval = setInterval(fetchSimulationData, 2000); // Fetch data every 2 seconds\n    } else {\n      setSimulationData({\n        stocks: [],\n        autoplayers: []\n      });\n    }\n    return () => clearInterval(interval);\n  }, [simulationRunning]);\n  const fetchSimulationData = () => {\n    fetch('http://localhost:3001/api/data').then(response => response.json()).then(data => {\n      if (data.error) {\n        setError(data.error);\n        setSimulationRunning(false);\n      } else {\n        setSimulationData(data);\n        setError(null);\n      }\n    }).catch(err => {\n      setError('Failed to fetch simulation data.');\n      setSimulationRunning(false);\n    });\n  };\n  const startSimulation = parameters => {\n    fetch('http://localhost:3001/api/start', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(parameters)\n    }).then(response => response.json()).then(data => {\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setSimulationRunning(true);\n        setError(null);\n      }\n    }).catch(err => {\n      setError('Failed to start simulation.');\n    });\n  };\n  const stopSimulation = () => {\n    fetch('http://localhost:3001/api/stop').then(response => response.json()).then(data => {\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setSimulationRunning(false);\n        setError(null);\n      }\n    }).catch(err => {\n      setError('Failed to stop simulation.');\n    });\n  };\n\n  // Your other state and functions here...\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(NavigationBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Stock Market Simulator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(SimulationControl, {\n        onSimulationStart: startSimulation,\n        onSimulationStop: stopSimulation,\n        simulationRunning: simulationRunning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"D/tZYawJHx3mm0FHaJiJPb0Hx7s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Route","Routes","SimulationControl","NavigationBar","jsxDEV","_jsxDEV","App","_s","simulationRunning","setSimulationRunning","simulationData","setSimulationData","stocks","autoplayers","error","setError","useEffect","interval","setInterval","fetchSimulationData","clearInterval","fetch","then","response","json","data","catch","err","startSimulation","parameters","method","headers","body","JSON","stringify","stopSimulation","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSimulationStart","onSimulationStop","_c","$RefreshReg$"],"sources":["D:/WORK/20241012_Stock_Market_Game_2/2-stock-game/stock-simulator-client/src/Pages/App.js"],"sourcesContent":["// src/components/App.js\r\nimport React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport SimulationControl from '../components/SimulationControl';\r\n// import StocksList from '../components/StocksList';\r\nimport NavigationBar from '../components/Navbar';\r\n\r\nfunction App() {\r\n  const [simulationRunning, setSimulationRunning] = useState(false);\r\n  const [simulationData, setSimulationData] = useState({ stocks: [], autoplayers: [] });\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n    if (simulationRunning) {\r\n      interval = setInterval(fetchSimulationData, 2000); // Fetch data every 2 seconds\r\n    } else {\r\n      setSimulationData({ stocks: [], autoplayers: [] });\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [simulationRunning]);\r\n\r\n  const fetchSimulationData = () => {\r\n    fetch('http://localhost:3001/api/data')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.error) {\r\n          setError(data.error);\r\n          setSimulationRunning(false);\r\n        } else {\r\n          setSimulationData(data);\r\n          setError(null);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setError('Failed to fetch simulation data.');\r\n        setSimulationRunning(false);\r\n      });\r\n  };\r\n\r\n  const startSimulation = (parameters) => {\r\n    fetch('http://localhost:3001/api/start', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(parameters),\r\n    })\r\n      .then((response) => response.json())\r\n            .then((data) => {\r\n        if (data.error) {\r\n          setError(data.error);\r\n        } else {\r\n          setSimulationRunning(true);\r\n          setError(null);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setError('Failed to start simulation.');\r\n      });\r\n     \r\n  };\r\n\r\n  const stopSimulation = () => {\r\n    fetch('http://localhost:3001/api/stop')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.error) {\r\n          setError(data.error);\r\n        } else {\r\n          setSimulationRunning(false);\r\n          setError(null);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setError('Failed to stop simulation.');\r\n      });\r\n  };\r\n\r\n// Your other state and functions here...\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <NavigationBar />\r\n      <div className=\"container\">\r\n        <h1>Stock Market Simulator</h1>\r\n        {error && <div className=\"alert alert-danger\">{error}</div>}\r\n        <SimulationControl\r\n          onSimulationStart={startSimulation}\r\n          onSimulationStop={stopSimulation}\r\n          simulationRunning={simulationRunning}\r\n        />\r\n        {/* <StocksList stocks={simulationData.stocks} /> */}\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}